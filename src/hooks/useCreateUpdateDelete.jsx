import React from 'react';
import {db} from './../firebase/config';
import { collection, addDoc, doc, deleteDoc, Timestamp, setDoc, getDoc, arrayUnion, arrayRemove, updateDoc} from "firebase/firestore";

let initialState = {
    document: null,
    isPending: false,
    error: null,
    success: null
}

function reducer (state,action){
    switch(action.type){
        case 'IS_PENDING':
            return {document: null, success: false, error: null, isPending: true};
        case 'CREATE_DOCUMENT':
            return {isPending: false, document: action.payload, success: true, error: null}
        case 'ERROR':
            return {isPending: false, document: null, success: false, error: action.payload}

        default:
            return state
    }
}

export function useCreateUpdateDelete(collectionName){

    const [response,dispatch] = React.useReducer(reducer,initialState);

    // flag to prevent overflow of api calls
    const [isCancelled,setIsCancelled] = React.useState(false);

    const dispatchIfCancelled = (action) =>{
        if(isCancelled == true) dispatch(action);
    }

    React.useEffect(()=>{
        return ()=>{
            console.log("No previous CUD dispatch pending")
            setIsCancelled(true);
        }
    },[])


    // Get Collection Reference  This will fetch docs of all users [Not Used]
    const collectionData = collection(db, collectionName);

    // if user Document exists update doc else push

    const addGetMovietoWatchList = async (data,uid) =>{
        dispatch({type: 'IS_PENDING'})

        try {
            const createdAt =  Timestamp.fromDate(new Date())
           
            // use for AutoGenerated Id
            // const newDocument = await addDoc(collectionData, {...doc, createdAt});

            // User Collection Data , This will fetch data, of current user
            const userDataCollection = doc(db, collectionName, uid)

            const docSnap = await getDoc(userDataCollection);
            
            if(!docSnap.exists()){
                const newUser = await setDoc(userDataCollection, {"WatchList" : []} )
            
                console.log("New User Watch List Created ");

                const addMovie = await updateDoc(userDataCollection, {"WatchList" : arrayUnion(data)});
            
                dispatchIfCancelled({type: 'CREATE_DOCUMENT', payload: addMovie})

                return docSnap.data()

            }
            // with arrayUnion only unique values will be added

            else{
                const addMovie = await updateDoc(userDataCollection, {"WatchList" : arrayUnion(data)});

                console.log("Movie Added to watch List ");

                dispatchIfCancelled({type: 'CREATE_DOCUMENT', payload: addMovie})

                return docSnap.data()
            }
          } 
        catch (e) {
                dispatchIfCancelled({type: 'ERROR', payload: e.message})

                console.error("Error adding document: ", e);
          }
    }

    // users and uid
    const getUserData = async (collectionName, uid) =>{

            const userDataCollection = doc(db, collectionName, uid)

            const docSnap = await getDoc(userDataCollection);

            return docSnap.data()


    }


    return {addGetMovietoWatchList,getUserData}
   
}


